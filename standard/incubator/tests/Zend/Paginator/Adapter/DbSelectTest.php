<?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://framework.zend.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Paginator
 * @subpackage UnitTests
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id$
 */

/**
 * @see Zend_Paginator_Adapter_DbSelect
 */
require_once 'Zend/Paginator/Adapter/DbSelect.php';

/**
 * @see Zend_Db_Adapter_Pdo_Sqlite
 */
require_once 'Zend/Db/Adapter/Pdo/Sqlite.php';

/**
 * @see PHPUnit_Framework_TestCase
 */
require_once 'PHPUnit/Framework/TestCase.php';

/**
 * @category   Zend
 * @package    Zend_Paginator
 * @subpackage UnitTests
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */
class Zend_Paginator_Adapter_DbSelectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Zend_Paginator_Adapter_DbSelect
     */
    private $_adapter;
    /**
     * Prepares the environment before running a test.
     */
    protected function setUp ()
    {
        parent::setUp();
        
        $db = new Zend_Db_Adapter_Pdo_Sqlite(array(
            'dbname' => 'Paginator/_files/test.sqlite'
        ));
        $query = $db->select()->from('test');
        
        $this->_adapter = new Zend_Paginator_Adapter_DbSelect($query);
    }
    /**
     * Cleans up the environment after running a test.
     */
    protected function tearDown ()
    {
        $this->_adapter = null;
        parent::tearDown();
    }
    
    public function testGetItemsOffsetZero()
    {
        $actual = $this->_adapter->getItems(0, 10);
        
        $i = 1;
        foreach ($actual as $item) {
        	$this->assertEquals($i, $item->number);
        	$i++;
        }
    }
    
    public function testGetItemsOffsetTen()
    {
        $actual = $this->_adapter->getItems(10, 10);
        
        $i = 11;
        foreach ($actual as $item) {
            $this->assertEquals($i, $item->number);
            $i++;
        }
    }
    
    public function testSetRowCount()
    {
        $this->markTestIncomplete("setRowCount test not implemented");
        $this->_adapter->setRowCount();
    }
    
    public function testCountWithAutoGeneratedQuery()
    {
        $expected = 500;
        $actual = $this->_adapter->count();
        
        $this->assertEquals($expected, $actual);
    }
}